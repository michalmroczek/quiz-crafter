@using System.Text.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using QuizCrafter.ModularComponents.Abstraction
@using QuizCrafter.ModularComponents.Abstraction.ComponentLoader
@using QuizCrafter.Shared.Contracts.Quizzes.Contracts.Requests
@using QuizCrafter.Shared.Contracts.Quizzes.Dto
@using QuizCrafter.Web.Quiz.Models
@using System.Reflection
@using QuizCrafter.ModularComponents.Abstraction.Core
@inject IModularComponentCollection _modularComponentCollection;
@inject LazyAssemblyLoader AssemblyLoader
@inject IHttpClientFactory _httpClientFactory

<MudItem xs="12" sm="10">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="10">
                    <MudTextField @bind-Value="quiz.Title" Label="Quiz name" Variant="MudBlazor.Variant.Outlined" AutoGrow></MudTextField>
                 </MudItem>
                 <MudItem xs="10" Style="min-height: 30vh">
                     <SortableList Id="sortable" Group="cloning" Pull="clone" Items="quiz?.Questions" OnUpdate="@SortList" Context="question" Handle=".drag-handle-question" OnAdd="AddComponent" Class="mud-grid mud-grid-item mud-grid-item-xs-12 drop-zone sortable-list">
                         <SortableItemTemplate>
                             <MudItem xs="12" Class="mt-3">
                                 <MudPaper Elevation="3" Class="rounded">
                                     <MudGrid Justify="Justify.FlexStart" Spacing="1" Class="mt-3">
                                         <MudItem xs="3"><MudText Typo="Typo.caption"> #@question.Order/@quiz.QuestionCount </MudText></MudItem>
                                            <MudItem xs="3" />
                                            <MudItem xs="1">
                                                <MudIcon Icon="@Icons.Material.Filled.DragIndicator" Title="Drag" Class="drag-handle-question" Style="cursor:grab" />
                                            </MudItem>
                                            <MudItem xs="4" />
                                            <MudItem xs="1">
                                                <MudIconButton Icon="@Icons.Material.Filled.Close" Title="Delete" OnClick="()=>DeleteQuestion(question)" Style="padding-top:5px; padding-bottom:0"></MudIconButton>
                                            </MudItem>
                                            <MudItem xs="12" Class="p-3">
                                                <DynamicComponent Type="_modularComponentCollection.GetEditableComponentDefinition(question)" Parameters="_modularComponentCollection.GetParameterDictionary(question)"></DynamicComponent>
                                            </MudItem>
                                        </MudGrid>
                                    </MudPaper>
                                </MudItem>
                            </SortableItemTemplate>
                        </SortableList>
                    </MudItem>
                </MudGrid>

                <MudDivider Class="mt-3 mb-3"></MudDivider>

                <MudButton OnClick="()=>CreateQuizAsync()">Create quiz</MudButton>
            </MudItem>
        </MudGrid>
    </MudItem>

    @code {
    QuizModel quiz = new();

    private void DeleteQuestion(ModularComponentModel componentModel)
    {
        quiz.RemoveQuestion(componentModel.Id);
    }

    private async Task CreateQuizAsync()
    {
        using var httpClient = _httpClientFactory.CreateClient("QuizCrafter.API");
        QuizDto quizDto = new()
            {
                Id = quiz.Id,
                Title = quiz.Title,
                Questions = quiz.Questions,
                Tags = quiz.Tags
            };
        
    await httpClient.PostAsJsonAsync($"{httpClient.BaseAddress}/me/quizzes", new CreateQuizRequest() { Quiz = quizDto});
    }

    private void SortList((int oldIndex, int newIndex) indices)
    {
        // deconstruct the tuple
        var (oldIndex, newIndex) = indices;

        quiz.ChangeOrder(indices.oldIndex, indices.newIndex);

        StateHasChanged();
    }

    bool open = true;

    void ToggleDrawer()
    {
        open = !open;
    }

    private void AddComponent((int oldIndex, int newIndex) indices)
    {
        var item = _modularComponentCollection[indices.oldIndex];
        quiz.AddQuestion(item.CreateModel(), indices.newIndex);

        StateHasChanged();
    }

}
