@using System.Text.Json
@using QuizCrafter.ModularComponents.Abstraction
@using QuizCrafter.Web.Common.ModularComponents
@using QuizCrafter.Web.Quiz.Models
@using QuizCrafter.Web.Services
@inject ModularComponentProvider mcp
<MudItem xs="12" sm="10">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="10">
                    <MudTextField @bind-Value="quiz.Title" Label="Quiz name" Variant="MudBlazor.Variant.Outlined" S AutoGrow></MudTextField>
                 </MudItem>
                 <SortableList Id="sortable" Group="cloning" Pull="clone" Items="quiz?.Questions" OnUpdate="@SortList" Context="question" Handle=".drag-handle-question" OnAdd="AddComponent" Class="mud-grid mud-grid-item mud-grid-item-xs-12 drop-zone sortable-list">
                     <SortableItemTemplate>
                         <MudGrid Justify="Justify.FlexEnd" Spacing="0" Class="mt-3">
                             <MudItem xs="1">
                             <MudIcon Icon="@Icons.Material.Filled.DragIndicator" Title="Drag" Class="drag-handle-question" Style="cursor:grab" />
                             </MudItem>
                             <MudSpacer/>
                             <MudItem xs="1">
                                 <MudIconButton Icon="@Icons.Material.Filled.Close" Title="Delete" OnClick="()=>DeleteQuestion(question)" Style="padding-top:5px; padding-bottom:0"></MudIconButton>
                             </MudItem>
                             <MudItem xs="12">
                                 <DynamicComponent Type="mcp.GetTypeDefinitionForomModel(question).EditComponentType" Parameters="mcp.GetTypeDefinitionForomModel(question).GetParameterDictionary(question)"></DynamicComponent>
                             </MudItem>
                         </MudGrid>
                     </SortableItemTemplate>
                 </SortableList>
             </MudGrid>

             <MudButton OnClick="()=>CreateQuizAsync()">Create quiz</MudButton>
         </MudItem>
     </MudGrid>
 </MudItem>

 @code {
    QuizModel quiz = new();

    protected async override Task OnInitializedAsync()
    {

    }

    private void DeleteQuestion(IModularComponentModel componentModel)
    {
        quiz.RemoveQuestion(componentModel.Id);
    }

    private async Task CreateQuizAsync()
    {
    }

    private void SortList((int oldIndex, int newIndex) indices)
    {
        // deconstruct the tuple
        var (oldIndex, newIndex) = indices;

        var items = quiz.Questions.ToList();
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        if (newIndex < items.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }

        StateHasChanged();
    }

    bool open = true;

    void ToggleDrawer()
    {
        open = !open;
    }

    private void AddComponent((int oldIndex, int newIndex) indices)
    {
        var item = mcp.Instances[indices.oldIndex];
        quiz.AddQuestion(item.CreateModel());

        StateHasChanged();
    }

}
