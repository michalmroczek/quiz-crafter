@using QuizCrafter.Web.Common.ModularComponents
@using QuizCrafter.Shared.Components
@using QuizCrafter.Web.Services
@using QuizCrafter.Web.Services.ModularComponents

@inject ModularComponentProvider mcp

<MudDrawer @bind-Open="@open" DisableOverlay="true" Elevation="1" Variant="@DrawerVariant.Temporary" ClipMode="DrawerClipMode.Always" Anchor="Anchor.Right" Style="--mud-drawer-width:300px;">
     <MudDrawerHeader>
         <MudText Typo="Typo.h6">Drag and drop elements</MudText>
     </MudDrawerHeader>
    <SortableList Id="drawer" Group="cloning" Pull="clone" Class="d-flex mud-width-full" Items="modularComponentDefinitions" Context="definitionType" Sort="false">
             <SortableItemTemplate>
            <IconTemplate Icon="@definitionType.Icon" Name="@definitionType.DisplayName"></IconTemplate>
             </SortableItemTemplate>
         </SortableList>

 </MudDrawer>
 @if(!open)
 {
    <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft" aria-label="open" Title="open" Style=" position: fixed;float:right;  top:70px; right:30px" OnClick="@(() => ToggleDrawer())"></MudIconButton>
}
else
{
    <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight" aria-label="close" Title="close" Style=" position: fixed; top:70px;float:right; right:320px;" OnClick="@(() => ToggleDrawer())"></MudIconButton>
}
@code {
    private IReadOnlyCollection<QuizCrafter.ModularComponents.Abstraction.IModularComponentTypeDefinition> modularComponentDefinitions = new List<QuizCrafter.ModularComponents.Abstraction.IModularComponentTypeDefinition>();

    protected override async Task OnInitializedAsync()
    {
        modularComponentDefinitions = await mcp.GetInstances();
    }

    bool open = true;

    void ToggleDrawer()
    {
        open = !open;
    }

}
